üß© C√ìDIGO COMENTADO E EXPLICADO
// Importa os hooks 'useEffect' e 'useState' do React
// - useState: para armazenar e gerenciar os dados (livros)
// - useEffect: para executar a√ß√µes assim que o componente √© montado (carregar livros da API)
import { useEffect, useState } from "react";

// Importa 'styled' do styled-components, usado para criar componentes React com CSS embutido
import styled from "styled-components";

// Importa sua inst√¢ncia do Axios configurada (geralmente com baseURL definida)
import api from "../../services/api";

üé® ESTILIZA√á√ÉO DO CARROSSEL
// =======================
// ESTILIZA√á√ÉO DO CARROSSEL
// =======================

// ListaLivros ‚Üí container principal que comporta as capas em formato de lista (<ul>)
const ListaLivros = styled.ul`
  display: flex;                /* Exibe os itens lado a lado (layout horizontal) */
  gap: 0.9em;                   /* Espa√ßamento entre cada capa */
  padding: 0.5em;               /* Espa√ßo interno do container */
  list-style: none;             /* Remove os marcadores de lista */
  overflow-x: auto;             /* Habilita rolagem horizontal se o conte√∫do ultrapassar a largura */
  scroll-behavior: smooth;      /* Faz a rolagem ficar suave */
  background-color: #AF6363;    /* Cor de fundo */
  margin: 0.3em;                /* Margem externa */

  /* Esconde a barra de rolagem, deixando apenas a rolagem pelo mouse ou toque */
  &::-webkit-scrollbar {
    display: none;
  }
`;


‚û°Ô∏è Fun√ß√£o: essa parte cria o carrossel visualmente.
A lista (ul) se comporta como uma faixa horizontal, onde as capas deslizam suavemente sem mostrar a barra de rolagem.

// Cada capa de livro individual (um <li> dentro da <ul>)
const ItemLivro = styled.li`
  flex: 0 0 auto;               /* Garante que o item mantenha tamanho fixo e n√£o encolha */
  scroll-snap-align: center;    /* Faz com que o item se alinhe no centro ao rolar */
`;


‚û°Ô∏è Fun√ß√£o: define como cada "item" (livro) vai se comportar no carrossel.
Cada item mant√©m sua largura e √© tratado como um "bloco fixo" dentro do container rol√°vel.

// Define o estilo da imagem da capa do livro
const CapaLivro = styled.img`
  height: 90px;                 /* Define a altura da capa (as larguras se ajustam automaticamente) */
  border-radius: 6px;           /* Deixa as bordas levemente arredondadas */
  transition: transform 0.2s;   /* Anima√ß√µes suaves quando algo muda (como hover) */
  cursor: pointer;              /* Mostra o √≠cone de clique quando o usu√°rio passa o mouse */

  &:hover {
    transform: scale(1.1);      /* Aumenta levemente o tamanho ao passar o mouse */
  }
`;


‚û°Ô∏è Fun√ß√£o: aqui a imagem do livro ganha estilo, interatividade e anima√ß√£o.
O hover ajuda a destacar o item selecionado, dando uma sensa√ß√£o mais ‚Äúviva‚Äù ao carrossel.

‚öôÔ∏è L√ìGICA DO COMPONENTE (React)
// =======================
// COMPONENTE PRINCIPAL
// =======================
function CarrosselLivros() {
  // useState cria uma vari√°vel 'livros' e uma fun√ß√£o 'setLivros' para atualiz√°-la
  // Come√ßa vazia at√© os dados serem carregados da API
  const [livros, setLivros] = useState([]);


‚û°Ô∏è Fun√ß√£o: livros guarda o estado atual da lista de livros.
setLivros √© usada para atualizar esse estado depois que os dados v√™m da API.

  // useEffect √© executado apenas uma vez (porque o array [] est√° vazio)
  // Serve para buscar os livros assim que o componente for montado na tela
  useEffect(() => {
    const carregarLivros = async () => {
      try {
        // Faz a requisi√ß√£o GET para a rota /livros da sua API
        const response = await api.get("/livros");

        // Embaralha os livros de forma aleat√≥ria (Math.random() - 0.5 gera um n√∫mero entre -0.5 e 0.5)
        // Depois pega apenas os 9 primeiros do array embaralhado
        const livrosAleatorios = response.data
          .sort(() => Math.random() - 0.5)
          .slice(0, 9);

        // Atualiza o estado 'livros' com o novo array de livros aleat√≥rios
        setLivros(livrosAleatorios);
      } catch (error) {
        // Caso algo d√™ errado (como erro 404 ou problema de conex√£o)
        console.error("Erro ao carregar livros:", error);
      }
    };

    // Chama a fun√ß√£o que busca e define os livros
    carregarLivros();
  }, []);


‚û°Ô∏è Fun√ß√£o geral do trecho acima:
Assim que o componente √© exibido na tela:

A fun√ß√£o carregarLivros() √© executada.

Ela chama a API /livros usando o Axios.

Os livros retornados s√£o embaralhados e limitados a 9.

O resultado √© salvo em setLivros, o que re-renderiza o componente com os livros carregados.

O [] no final garante que isso aconte√ßa apenas uma vez (como um ‚ÄúonLoad‚Äù).

  // Renderiza√ß√£o condicional: enquanto os livros ainda n√£o foram carregados
  if (livros.length === 0) return <p>Carregando livros...</p>;


‚û°Ô∏è Fun√ß√£o: evita que o React tente exibir algo antes da API responder.
Enquanto livros estiver vazio, mostra o texto ‚ÄúCarregando livros...‚Äù.

  return (
    <ListaLivros>
      {livros.map((livro) => (
        <ItemLivro key={livro.id}>
          <CapaLivro
            src={`http://localhost:3000/${livro.foto}`} // Caminho completo da imagem retornada pela API
            alt={livro.titulo}                         // Texto alternativo para acessibilidade
          />
        </ItemLivro>
      ))}
    </ListaLivros>
  );
}


‚û°Ô∏è Fun√ß√£o:

Percorre o array livros e cria um <ItemLivro> para cada um.

Dentro dele, renderiza a <CapaLivro> com a imagem do servidor (livro.foto).

A key={livro.id} ajuda o React a identificar cada item de forma √∫nica (evita re-renderiza√ß√µes desnecess√°rias).

export default CarrosselLivros;


‚û°Ô∏è Fun√ß√£o:
Exporta o componente para ser usado em outras partes do projeto (por exemplo, em uma p√°gina principal ou se√ß√£o de ‚Äúdestaques‚Äù).

üß† RESUMO DID√ÅTICO
Conceito	O que faz	Onde aparece
useState	Armazena o estado dos livros	const [livros, setLivros] = useState([])
useEffect	Executa a busca de dados assim que o componente carrega	useEffect(() => { ... }, [])
Axios (api)	Faz requisi√ß√µes HTTP para o backend	api.get("/livros")
styled-components	Cria componentes com CSS embutido	`const ListaLivros = styled.ul``
Renderiza√ß√£o condicional	Mostra uma mensagem enquanto os dados n√£o chegam	if (livros.length === 0)
Map	Gera os elementos do carrossel com base nos dados	{livros.map((livro) => ...)}
Math.random() - 0.5	Embaralha o array de livros	.sort(() => Math.random() - 0.5)
slice(0, 9)	Seleciona apenas 9 livros	.slice(0, 9)